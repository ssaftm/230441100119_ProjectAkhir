/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectakhir;
import java.util.Date;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

/**
 *
 * @author Safira
 */
public class kesehatan extends javax.swing.JFrame {

    /**
     * Creates new form kesehatan
     */
    public kesehatan() {
         initComponents();

        // Inisialisasi model untuk tabel Aktivitas dan Makanan
        tabelAktivitas.setModel(new DefaultTableModel(
            new String[]{"ID", "Tanggal", "Jenis Aktivitas", "Durasi (menit)", "Kalori Terbakar"}, 0));
        tabelMakanan.setModel(new DefaultTableModel(
            new String[]{"ID", "Tanggal", "Jenis Makanan", "Porsi (gram)", "Kalori Total"}, 0));
        
        //load
        loadDataAktivitas();
        loadDataMakanan();
        loadDataRekapMingguan();
        hitungRekapMingguan();
        checkAndUpdateRecap();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        simpanAktivitas = new javax.swing.JButton();
        updateAktivitas = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        idAktivitas = new javax.swing.JTextField();
        kaloriTerbakar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        hapusAktivitas = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        durasiAktivitas = new javax.swing.JComboBox<>();
        jenisAktivitas = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tglAktivitas = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jenisMakanan = new javax.swing.JComboBox<>();
        id_makanan = new javax.swing.JTextField();
        porsiMakanan = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        tambahMakananBtn = new javax.swing.JButton();
        tambahKalori = new javax.swing.JTextField();
        tambahMakanan = new javax.swing.JTextField();
        kaloriTotal = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        hapusMakanan = new javax.swing.JButton();
        simpanMakanan = new javax.swing.JButton();
        updateMakanan = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelAktivitas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelMakanan = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelRekap = new javax.swing.JTable();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(223, 204, 251));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(223, 204, 251));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("APLIKASI PENGHITUNG KALORI");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(362, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(305, 305, 305))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel10)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(223, 204, 251));

        jTabbedPane1.setBackground(new java.awt.Color(253, 206, 223));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        simpanAktivitas.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        simpanAktivitas.setText("simpan");
        simpanAktivitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanAktivitasActionPerformed(evt);
            }
        });

        updateAktivitas.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        updateAktivitas.setText("edit");
        updateAktivitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAktivitasActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        idAktivitas.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jPanel9.add(idAktivitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 160, -1));

        kaloriTerbakar.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jPanel9.add(kaloriTerbakar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 160, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel11.setText("ID Aktifitas:");
        jPanel9.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 104, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel7.setText("Kalori Terbakar:");
        jPanel9.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 104, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\Downloads\\frame2.png")); // NOI18N
        jPanel9.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 440, 270));

        hapusAktivitas.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        hapusAktivitas.setText("hapus");
        hapusAktivitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusAktivitasActionPerformed(evt);
            }
        });

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        durasiAktivitas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "15 menit", "20 menit", "25 menit", "30 menit" }));
        jPanel12.add(durasiAktivitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 170, -1));

        jenisAktivitas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "jogging - 6", "bersepeda - 9", "lari - 10" }));
        jPanel12.add(jenisAktivitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 170, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel13.setText("terbakar per menit");
        jPanel12.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 104, 20));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel3.setText("Aktifitas & kal ");
        jPanel12.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 104, 20));
        jPanel12.add(tglAktivitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 170, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel2.setText("Tanggal Aktifitas:");
        jPanel12.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 104, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel4.setText("Durasi (menit):");
        jPanel12.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 104, 20));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\Downloads\\frame2.png")); // NOI18N
        jPanel12.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 10, -1, 270));

        jLabel19.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\bunga.png")); // NOI18N

        jLabel20.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\boneka.png")); // NOI18N

        jLabel21.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\love.png")); // NOI18N

        jLabel26.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\pita.png")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(simpanAktivitas)
                        .addGap(173, 173, 173)
                        .addComponent(updateAktivitas)
                        .addGap(152, 152, 152)
                        .addComponent(hapusAktivitas))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel20)
                        .addGap(130, 130, 130)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel21)
                        .addGap(123, 123, 123)
                        .addComponent(jLabel19)
                        .addGap(17, 17, 17)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hapusAktivitas)
                    .addComponent(updateAktivitas)
                    .addComponent(simpanAktivitas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel26)
                        .addComponent(jLabel21))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel19)))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tab Aktivitas", jPanel4);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.add(jenisMakanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 170, -1));

        id_makanan.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jPanel10.add(id_makanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 170, -1));
        jPanel10.add(porsiMakanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 170, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel17.setText("ID Makanan:");
        jPanel10.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 80, -1));

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel15.setText("Makanan & kal/g:");
        jPanel10.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 120, -1));

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel14.setText("Porsi (gram):");
        jPanel10.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 104, -1));

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\Downloads\\frame2.png")); // NOI18N
        jPanel10.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, -10, 440, -1));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tambahMakananBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        tambahMakananBtn.setText("tambah makanan");
        tambahMakananBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahMakananBtnActionPerformed(evt);
            }
        });
        jPanel8.add(tambahMakananBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, -1, -1));
        jPanel8.add(tambahKalori, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 170, -1));
        jPanel8.add(tambahMakanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 170, -1));

        kaloriTotal.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jPanel8.add(kaloriTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 170, -1));

        jLabel22.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel22.setText("Tambah Makanan:");
        jPanel8.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 104, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel18.setText("Tambah Kalori:");
        jPanel8.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 104, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel16.setText("Total Kalori:");
        jPanel8.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 104, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\Downloads\\frame2.png")); // NOI18N
        jPanel8.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, -10, 430, 260));

        hapusMakanan.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        hapusMakanan.setText("hapus");
        hapusMakanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusMakananActionPerformed(evt);
            }
        });

        simpanMakanan.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        simpanMakanan.setText("simpan");
        simpanMakanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanMakananActionPerformed(evt);
            }
        });

        updateMakanan.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        updateMakanan.setText("edit");
        updateMakanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMakananActionPerformed(evt);
            }
        });

        jLabel27.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\bunga.png")); // NOI18N

        jLabel28.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\boneka.png")); // NOI18N

        jLabel29.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\love.png")); // NOI18N

        jLabel30.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\pita.png")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(143, 143, 143)
                                .addComponent(simpanMakanan)
                                .addGap(173, 173, 173)
                                .addComponent(updateMakanan)
                                .addGap(152, 152, 152)
                                .addComponent(hapusMakanan)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(130, 130, 130)
                        .addComponent(jLabel30)
                        .addGap(175, 175, 175)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel27)
                        .addGap(88, 88, 88))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hapusMakanan)
                    .addComponent(updateMakanan)
                    .addComponent(simpanMakanan))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel30)
                        .addComponent(jLabel29))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel27)))
                .addContainerGap(146, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tab Makanan", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        tabelAktivitas.setBackground(new java.awt.Color(248, 232, 238));
        tabelAktivitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Aktivitas", "Tanggal", "Jenis Aktivitas", "Durasi", "Kalori Terbakar"
            }
        ));
        jScrollPane1.setViewportView(tabelAktivitas);

        tabelMakanan.setBackground(new java.awt.Color(248, 232, 238));
        tabelMakanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Makanan", "Tanggal", "Makanan & kal/g", "Porsi", "Total Kalori"
            }
        ));
        jScrollPane2.setViewportView(tabelMakanan);

        tabelRekap.setBackground(new java.awt.Color(248, 232, 238));
        tabelRekap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Total", "Tanggal Mulai", "Tangal Akhir", "Sisa Kalori"
            }
        ));
        tabelRekap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelRekapMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabelRekap);

        jLabel31.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\boneka.png")); // NOI18N

        jLabel32.setIcon(new javax.swing.ImageIcon("C:\\Users\\Safira\\OneDrive\\Gambar\\bunga.png")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel31)
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel32)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jLabel32))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jLabel31)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );

        jTabbedPane1.addTab("Tabel Data Gizi", jPanel6);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateMakananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMakananActionPerformed
        updateMakanan();
    }//GEN-LAST:event_updateMakananActionPerformed

    private void simpanAktivitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanAktivitasActionPerformed
        simpanAktivitas();
    }//GEN-LAST:event_simpanAktivitasActionPerformed

    private void hapusAktivitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusAktivitasActionPerformed
        hapusAktivitas();
    }//GEN-LAST:event_hapusAktivitasActionPerformed

    private void updateAktivitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAktivitasActionPerformed
        updateAktivitas();
    }//GEN-LAST:event_updateAktivitasActionPerformed

    private void tambahMakananBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahMakananBtnActionPerformed
        tambahMakanan();
    }//GEN-LAST:event_tambahMakananBtnActionPerformed

    private void simpanMakananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanMakananActionPerformed
        simpanMakanan();
    }//GEN-LAST:event_simpanMakananActionPerformed

    private void hapusMakananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusMakananActionPerformed
        hapusMakanan();
    }//GEN-LAST:event_hapusMakananActionPerformed

    private void tabelRekapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelRekapMouseClicked

    int selectedRow = tabelRekap.getSelectedRow();
    if (selectedRow == -1) return;

    int idTotal = (int) tabelRekap.getValueAt(selectedRow, 0); // Ambil ID dari kolom pertama
    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data rekap mingguan ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        String sqlDelete = "DELETE FROM rekap_mingguan WHERE id_total = ?";
        try (Connection conn = koneksi.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sqlDelete)) {

            pstmt.setInt(1, idTotal);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data rekap mingguan berhasil dihapus!");
            loadDataRekapMingguan();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data rekap mingguan: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_tabelRekapMouseClicked
// Simpan Aktivitas
private void simpanAktivitas() {
    int idaktivitas = Integer.parseInt(idAktivitas.getText());
    Date tanggal = tglAktivitas.getDate();
    String aktivitas = (String) jenisAktivitas.getSelectedItem();
    String durasiText = (String) durasiAktivitas.getSelectedItem();
    int durasi = Integer.parseInt(durasiText.replaceAll("[^0-9]", "")); // Extract number from duration

    int kaloriPerMenit = switch (aktivitas) {
        case "jogging - 6" -> 6;
        case "bersepeda - 9" -> 9;
        case "lari - 10" -> 10;
        default -> 0;
    };

    float totalKalori = kaloriPerMenit * durasi;
    kaloriTerbakar.setText(String.valueOf(totalKalori));

    String sql = "INSERT INTO aktivitas (id_aktivitas, tanggal, jenis_aktivitas, durasi, kalori_terbakar) VALUES (?, ?, ?, ?, ?)";
    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setInt(1, idaktivitas);
        pstmt.setDate(2, new java.sql.Date(tanggal.getTime()));
        pstmt.setString(3, aktivitas);
        pstmt.setInt(4, durasi);
        pstmt.setFloat(5, totalKalori);

        pstmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Aktivitas berhasil ditambahkan!");
        loadDataAktivitas();
        checkAndUpdateRecap();

        idAktivitas.setText("");
        tglAktivitas.setDate(null);
        jenisAktivitas.setSelectedItem(null);
        durasiAktivitas.setSelectedItem(null);
        kaloriTerbakar.setText("");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menambahkan aktivitas: " + e.getMessage());
    }
}


// Fungsi untuk memuat data aktivitas ke tabel
private void loadDataAktivitas() {
    String sql = "SELECT * FROM aktivitas";
    DefaultTableModel model = (DefaultTableModel) tabelAktivitas.getModel();
    model.setRowCount(0); 

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        while (rs.next()) {
            Object[] row = {
                rs.getInt("id_aktivitas"),
                rs.getDate("tanggal"),
                rs.getString("jenis_aktivitas"),
                rs.getInt("durasi"),
                rs.getFloat("kalori_terbakar")
            };
            System.out.println("Data: " + row);  // Debug: Print data yang diambil
            model.addRow(row);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data aktivitas: " + e.getMessage());
    }
}


// Update Aktivitas
private void updateAktivitas() {
    String idAktivitasText = idAktivitas.getText();
    if (idAktivitasText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID Aktivitas harus diisi.");
        return;
    }

    Date tanggal = tglAktivitas.getDate();
    if (tanggal == null) {
        JOptionPane.showMessageDialog(this, "Tanggal aktivitas harus diisi.");
        return;
    }

    String aktivitas = (String) jenisAktivitas.getSelectedItem();
    String durasiText = (String) durasiAktivitas.getSelectedItem();
    int durasi = Integer.parseInt(durasiText.replaceAll("[^0-9]", ""));

    int kaloriPerMenit = switch (aktivitas.toLowerCase()) {
        case "jogging - 6" -> 6;
        case "bersepeda - 9" -> 9;
        case "lari - 10" -> 10;
        default -> 0;
    };

    float totalKalori = kaloriPerMenit * durasi;

    String sql = "UPDATE aktivitas SET tanggal = ?, jenis_aktivitas = ?, durasi = ?, kalori_terbakar = ? WHERE id_aktivitas = ?";

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setDate(1, new java.sql.Date(tanggal.getTime()));
        pstmt.setString(2, aktivitas);
        pstmt.setInt(3, durasi);
        pstmt.setFloat(4, totalKalori);
        pstmt.setInt(5, Integer.parseInt(idAktivitasText));

        pstmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Aktivitas berhasil diupdate!");
        loadDataAktivitas();

        // Update tanggal di tabel makanan untuk id yang relevan
        updateTanggalMakanan(Integer.parseInt(idAktivitasText), tanggal);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengupdate aktivitas: " + e.getMessage());
    }
}

// Update Tanggal Makanan untuk ID tertentu
private void updateTanggalMakanan(int idMakanan, Date tanggalAktivitas) {
    String sql = "UPDATE makanan SET tanggal = ? WHERE id_makanan = ?";

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setDate(1, new java.sql.Date(tanggalAktivitas.getTime()));
        pstmt.setInt(2, idMakanan);

        int rowsUpdated = pstmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Tanggal di tabel makanan berhasil diperbarui sesuai dengan perubahan di tabel aktivitas.");
            loadDataMakanan();
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memperbarui tanggal di tabel makanan: " + e.getMessage());
    }
}

// Hapus Aktivitas dengan validasi ID
private void hapusAktivitas() {
    String idAktivitasText = idAktivitas.getText();
    if (idAktivitasText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID Aktivitas harus diisi.");
        return;
    }

    String sqlDelete = "DELETE FROM aktivitas WHERE id_aktivitas = ?";
    String sqlResetAutoIncrement = "ALTER TABLE aktivitas AUTO_INCREMENT = 1";

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmtDelete = conn.prepareStatement(sqlDelete)) {

        pstmtDelete.setInt(1, Integer.parseInt(idAktivitasText));
        pstmtDelete.executeUpdate();
        
        String checkEmptyTable = "SELECT COUNT(*) AS row_count FROM aktivitas";
        try (PreparedStatement pstmtCheck = conn.prepareStatement(checkEmptyTable);
             ResultSet rs = pstmtCheck.executeQuery()) {
            if (rs.next() && rs.getInt("row_count") == 0) {
                try (PreparedStatement pstmtReset = conn.prepareStatement(sqlResetAutoIncrement)) {
                    pstmtReset.executeUpdate();
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Aktivitas berhasil dihapus!");
        loadDataAktivitas();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menghapus aktivitas: " + e.getMessage());
    }
}


// Simpan Makanan
private void simpanMakanan() {
    int idmakanan = Integer.parseInt(id_makanan.getText());
    Date tanggal = getTanggalById(idmakanan); 
    if (tanggal == null) {
        JOptionPane.showMessageDialog(this, "Tanggal tidak ditemukan untuk ID: " + idmakanan + ". Silakan cek tab aktivitas.");
        return;
    }

    String makananInfo = (String) jenisMakanan.getSelectedItem();
    int porsi = Integer.parseInt(porsiMakanan.getText());
    
    String[] makananData = makananInfo.split(" - ");
    String makanan = makananData[0];
    int kaloriPerGram = Integer.parseInt(makananData[1].replace(" kal/g", ""));

    int totalKalori = kaloriPerGram * porsi;
    
    kaloriTotal.setText(String.valueOf(totalKalori));
    String sql = "INSERT INTO makanan (id_makanan, tanggal, makanan_kal, porsi, kalori_total) VALUES (?, ?, ?, ?, ?)";
    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setInt(1, idmakanan);  
        pstmt.setDate(2, new java.sql.Date(tanggal.getTime()));  
        pstmt.setString(3, makanan);
        pstmt.setInt(4, porsi);
        pstmt.setInt(5, totalKalori);
        pstmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Makanan berhasil ditambahkan!");
        loadDataMakanan();
        checkAndUpdateRecap();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menambahkan makanan: " + e.getMessage());
    }
}

// Method untuk mendapatkan tanggal dari tab aktivitas berdasarkan ID
private Date getTanggalById(int id) {
    String sql = "SELECT tanggal FROM aktivitas WHERE id_aktivitas = ?";
    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setInt(1, id);
        ResultSet rs = pstmt.executeQuery();
        if (rs.next()) {
            return rs.getDate("tanggal"); 
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengambil tanggal dari aktivitas: " + e.getMessage());
    }
    return null; 
}


// Load Data Makanan
private void loadDataMakanan() {
    String sql = "SELECT * FROM makanan";
    DefaultTableModel model = (DefaultTableModel) tabelMakanan.getModel();
    model.setRowCount(0); 

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        while (rs.next()) {
            Object[] row = {
                rs.getInt("id_makanan"),
                rs.getDate("tanggal"),
                rs.getString("makanan_kal"),
                rs.getInt("porsi"),
                rs.getInt("kalori_total")
            };
            model.addRow(row);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data makanan: " + e.getMessage());
    }
}

// Update Makanan
private void updateMakanan() {
    String idMakananText = id_makanan.getText();
    if (idMakananText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan ID makanan yang ingin diupdate.");
        return;
    }

    int idMakanan = Integer.parseInt(idMakananText);

    Date tanggalAktivitas = getLatestAktivitasDate();
    if (tanggalAktivitas == null) {
        JOptionPane.showMessageDialog(this, "Tanggal pada tabel aktivitas tidak ditemukan.");
        return;
    }

    String makananInfo = (String) jenisMakanan.getSelectedItem();
    int porsi = Integer.parseInt(porsiMakanan.getText());

    String[] makananData = makananInfo.split(" - ");
    String makanan = makananData[0];
    int kaloriPerGram = Integer.parseInt(makananData[1].replace(" kal/g", ""));
    int totalKalori = kaloriPerGram * porsi;

    String sql = "UPDATE makanan SET tanggal = ?, makanan_kal = ?, porsi = ?, kalori_total = ? WHERE id_makanan = ?";
    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setDate(1, new java.sql.Date(tanggalAktivitas.getTime()));
        pstmt.setString(2, makanan);
        pstmt.setInt(3, porsi);
        pstmt.setInt(4, totalKalori);
        pstmt.setInt(5, idMakanan);

        int rowsUpdated = pstmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Makanan berhasil diupdate sesuai dengan tanggal aktivitas terbaru!");
            loadDataMakanan(); 
        } else {
            JOptionPane.showMessageDialog(this, "ID makanan tidak ditemukan.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengupdate makanan: " + e.getMessage());
    }
}


// method untuk mendapatkan tanggal terakhir
private Date getLatestAktivitasDate() {
    String sql = "SELECT MAX(tanggal) AS latest_date FROM aktivitas";
    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        if (rs.next()) {
            return rs.getDate("latest_date");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mendapatkan tanggal terbaru dari tabel aktivitas: " + e.getMessage());
    }
    return null; 
}

// Hapus Makanan
private void hapusMakanan() {
    String idAktivitasText = id_makanan.getText();
    if (idAktivitasText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID Makanan harus diisi.");
        return;
    }

    String sqlDelete = "DELETE FROM makanan WHERE id_makanan = ?";
    String sqlResetAutoIncrement = "ALTER TABLE makanan AUTO_INCREMENT = 1";

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmtDelete = conn.prepareStatement(sqlDelete)) {

        pstmtDelete.setInt(1, Integer.parseInt(idAktivitasText));
        pstmtDelete.executeUpdate();

        String checkEmptyTable = "SELECT COUNT(*) AS row_count FROM makanan";
        try (PreparedStatement pstmtCheck = conn.prepareStatement(checkEmptyTable);
             ResultSet rs = pstmtCheck.executeQuery()) {
            if (rs.next() && rs.getInt("row_count") == 0) {
                try (PreparedStatement pstmtReset = conn.prepareStatement(sqlResetAutoIncrement)) {
                    pstmtReset.executeUpdate();
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Aktivitas berhasil dihapus!");
        loadDataMakanan(); 

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menghapus aktivitas: " + e.getMessage());
    }
}


// Tambah Makanan ke ComboBox (jenisMakanan) secara otomatis
private void tambahMakanan() {
    String makanan = tambahMakanan.getText();
    String kaloriText = tambahKalori.getText();

    if (makanan.isEmpty() || kaloriText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan nama makanan dan kalori per gram.");
        return;
    }

    try {
        int kaloriPerGram = Integer.parseInt(kaloriText);

        String makananComboText = makanan + " - " + kaloriPerGram + " kal/g";

        jenisMakanan.addItem(makananComboText);

        JOptionPane.showMessageDialog(this, "Makanan berhasil ditambahkan ke daftar!");

        tambahMakanan.setText("");
        tambahKalori.setText("");

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Kalori per gram harus berupa angka.");
    }
}


// Hitung Rekap Mingguan
private void checkAndUpdateRecap() {
    String sqlCountRows = "SELECT COUNT(*) as total FROM (SELECT tanggal FROM aktivitas UNION ALL SELECT tanggal FROM makanan) AS combined";
    
    try (Connection conn = koneksi.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sqlCountRows);
         ResultSet rs = stmt.executeQuery()) {
        
        if (rs.next()) {
            int totalRows = rs.getInt("total");
            if (totalRows % 7 == 0) {
                hitungRekapMingguan();
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memeriksa jumlah data: " + e.getMessage());
        e.printStackTrace();
    }
}

// Method hitungRekapMingguan yang dimodifikasi
private void hitungRekapMingguan() {
    try (Connection conn = koneksi.getConnection()) {
        String sqlLastRecap = "SELECT MAX(tanggal_akhir) FROM rekap_mingguan";
        LocalDate startDate;
        
        try (PreparedStatement stmtLast = conn.prepareStatement(sqlLastRecap);
             ResultSet rsLast = stmtLast.executeQuery()) {
            
            if (rsLast.next() && rsLast.getDate(1) != null) {
                startDate = rsLast.getDate(1).toLocalDate().plusDays(1);
            } else {
                startDate = getEarliestDate(conn);
            }
        }

        LocalDate currentDate = startDate;
        while (true) {
            LocalDate endDate = currentDate.plusDays(6);

            String sqlCheckData = 
                "SELECT COUNT(*) as count FROM (" +
                "    SELECT tanggal FROM aktivitas WHERE tanggal BETWEEN ? AND ? " +
                "    UNION " +
                "    SELECT tanggal FROM makanan WHERE tanggal BETWEEN ? AND ?" +
                ") as combined";
                
            try (PreparedStatement stmtCheck = conn.prepareStatement(sqlCheckData)) {
                stmtCheck.setDate(1, java.sql.Date.valueOf(currentDate));
                stmtCheck.setDate(2, java.sql.Date.valueOf(endDate));
                stmtCheck.setDate(3, java.sql.Date.valueOf(currentDate));
                stmtCheck.setDate(4, java.sql.Date.valueOf(endDate));
                
                ResultSet rsCheck = stmtCheck.executeQuery();
                if (!rsCheck.next() || rsCheck.getInt("count") == 0) {
                    break;
                }
            }
            
            if (ChronoUnit.DAYS.between(currentDate, endDate) < 6) {
                break; 
            }

            String sqlMakanan = 
                "SELECT COALESCE(SUM(kalori_total), 0) as total_kalori " +
                "FROM makanan WHERE tanggal BETWEEN ? AND ?";
                
            int totalKaloriMakanan = 0;
            try (PreparedStatement stmtMakanan = conn.prepareStatement(sqlMakanan)) {
                stmtMakanan.setDate(1, java.sql.Date.valueOf(currentDate));
                stmtMakanan.setDate(2, java.sql.Date.valueOf(endDate));
                
                ResultSet rsMakanan = stmtMakanan.executeQuery();
                if (rsMakanan.next()) {
                    totalKaloriMakanan = rsMakanan.getInt("total_kalori");
                }
            }

            String sqlAktivitas = 
                "SELECT COALESCE(SUM(kalori_terbakar), 0) as total_terbakar " +
                "FROM aktivitas WHERE tanggal BETWEEN ? AND ?";
                
            int totalKaloriTerbakar = 0;
            try (PreparedStatement stmtAktivitas = conn.prepareStatement(sqlAktivitas)) {
                stmtAktivitas.setDate(1, java.sql.Date.valueOf(currentDate));
                stmtAktivitas.setDate(2, java.sql.Date.valueOf(endDate));
                
                ResultSet rsAktivitas = stmtAktivitas.executeQuery();
                if (rsAktivitas.next()) {
                    totalKaloriTerbakar = rsAktivitas.getInt("total_terbakar");
                }
            }

            int sisaKalori = totalKaloriMakanan - totalKaloriTerbakar;

            String sqlInsert = 
                "INSERT INTO rekap_mingguan (tanggal_mulai, tanggal_akhir, sisa_kalori) " +
                "VALUES (?, ?, ?)";
                
            try (PreparedStatement stmtInsert = conn.prepareStatement(sqlInsert)) {
                stmtInsert.setDate(1, java.sql.Date.valueOf(currentDate));
                stmtInsert.setDate(2, java.sql.Date.valueOf(endDate));
                stmtInsert.setInt(3, sisaKalori);
                stmtInsert.executeUpdate();
            }

            currentDate = endDate.plusDays(1);
        }

        loadDataRekapMingguan();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error saat merekap data: " + e.getMessage());
        e.printStackTrace();
    }
}

private LocalDate getEarliestDate(Connection conn) throws SQLException {
    String sql = "SELECT MIN(tanggal) as earliest FROM (" +
                "    SELECT tanggal FROM aktivitas " +
                "    UNION " +
                "    SELECT tanggal FROM makanan" +
                ") as combined";
                
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        if (rs.next() && rs.getDate("earliest") != null) {
            return rs.getDate("earliest").toLocalDate();
        }
    }
    return LocalDate.now(); 
}

// Metode untuk memuat data rekap mingguan ke dalam tabel
private void loadDataRekapMingguan() {
    String sql = "SELECT * FROM rekap_mingguan ORDER BY id_total ASC";
    DefaultTableModel model = (DefaultTableModel) tabelRekap.getModel();
    model.setRowCount(0); 

    try (Connection conn = koneksi.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        while (rs.next()) {
            int idTotal = rs.getInt("id_total");
            Date tanggalMulai = rs.getDate("tanggal_mulai");
            Date tanggalAkhir = rs.getDate("tanggal_akhir");
            int sisaKalori = rs.getInt("sisa_kalori");

            model.addRow(new Object[]{idTotal, tanggalMulai, tanggalAkhir, sisaKalori});
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data rekap mingguan: " + e.getMessage());
        e.printStackTrace();
    }
}









    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new kesehatan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> durasiAktivitas;
    private javax.swing.JButton hapusAktivitas;
    private javax.swing.JButton hapusMakanan;
    private javax.swing.JTextField idAktivitas;
    private javax.swing.JTextField id_makanan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> jenisAktivitas;
    private javax.swing.JComboBox<String> jenisMakanan;
    private javax.swing.JTextField kaloriTerbakar;
    private javax.swing.JTextField kaloriTotal;
    private javax.swing.JTextField porsiMakanan;
    private javax.swing.JButton simpanAktivitas;
    private javax.swing.JButton simpanMakanan;
    private javax.swing.JTable tabelAktivitas;
    private javax.swing.JTable tabelMakanan;
    private javax.swing.JTable tabelRekap;
    private javax.swing.JTextField tambahKalori;
    private javax.swing.JTextField tambahMakanan;
    private javax.swing.JButton tambahMakananBtn;
    private com.toedter.calendar.JDateChooser tglAktivitas;
    private javax.swing.JButton updateAktivitas;
    private javax.swing.JButton updateMakanan;
    // End of variables declaration//GEN-END:variables
}
